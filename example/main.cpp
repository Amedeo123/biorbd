#include <iostream>
#include "s2mMusculoSkeletalModel.h"
#include "s2mStaticOptimization.h"
#include <memory>
#include "IpoptTestMain.h"
#include <cstdlib>
#include <random>
#define BUILD_SANDBOX

#ifdef BUILD_SANDBOX


int main()
{
    s2mMusculoSkeletalModel m3("test-os-masse.biomod");
    mainTest optim_test(m3);
    optim_test.main();
//    s2mMusculoSkeletalModel m3("test-os-masse.biomod");
    s2mGenCoord Q(m3);
    s2mGenCoord QDot(m3);
    s2mGenCoord QDDot(m3);

//    std::default_random_engine re(time(0));
//    std::uniform_int_distribution<int> distrib{0, 100};

    for (unsigned i = 0; i<m3.nbQ(); i++){
        Q[i] = 0 ;//static_cast<double>(distrib(re)-50)/100*3.14/2;
        QDot[i] = 0;//static_cast<double>(distrib(re)-50)/100*10;
        QDDot[i] = 0;//static_cast<double>(distrib(re)-50)/100*50;
    }
    //QDDot[0] = -11.4546;
    //QDDot[1] = 9.74539;


//    std::vector<s2mMuscleStateActual> state;
//    for (unsigned int i = 0; i<m3.nbMuscleTotal(); ++i){
//        state.push_back(s2mMuscleStateActual(0, 0.1));
//    }

//    s2mTau tau_calcul = m3.muscularJointTorque(m3, state, true, &Q, &QDot);
//    std::cout << "tau :\n" << tau_calcul << std::endl;
//    RigidBodyDynamics::ForwardDynamics(m3, Q, QDot, tau_calcul, QDDot);
//    std::cout << "forward dynamics done" << std::endl;
    s2mTau tau_inv(m3.nbTau());
    tau_inv.setZero();
    RigidBodyDynamics::InverseDynamics(m3, Q, QDot, QDDot, tau_inv);
    std::cout << "tau_inv :\n" << tau_inv << std::endl;

    std::vector<s2mMuscleStateActual> State(m3.nbMuscleTotal());
    for (unsigned int i = 0; i<m3.nbMuscleTotal(); ++i){
        State[i].setActivation(0.3925);
    }
    //s2mTau tau_inv = m_model.muscularJointTorque(m_model, m_State, true, &m_Q, &m_Qdot);
    s2mTau tau(m3.nbTau());
    tau = m3.muscularJointTorque(m3, State, true, &Q, &QDot);
    std::cout << "tau generated by muscle:\n" << tau << std::endl;

//    unsigned int nbmuscle = m3.nbMuscleTotal();
//    s2mVector activ(nbmuscle);
//    for (unsigned int i=0; i < nbmuscle ; i++){
//        activ[i] = 0.02;
//    }

//    s2mVector a(m3.nbDof());
//    for (unsigned int i=0; i < m3.nbDof() ; i++){
//        a[i] = -9.81;
//    }
//    s2mTau tau(a);
//    s2mStaticOptimization optim(m3, Q, QDot, tau, state);
//    optim.optimize();

//    std::cout << "Q:\n" << Q << std::endl;
//    std::cout << "QDot:\n" << QDot << std::endl;
//    std::cout << "QDDot:\n" << QDDot << std::endl;
//    std::cout << "Tau:\n" << tau << std::endl;



//    s2mMusculoSkeletalModel m3("pyomecaman.bioMod");

//    s2mGenCoord q;


//    s2mGenCoord Q(m3);
//    s2mGenCoord QDDot(m3);
//    Q.setZero();
//    s2mTau T(m3);
//    T.setZero();

//    RigidBodyDynamics::ForwardDynamicsConstraintsDirect(m3, Q, Q, T, m3.getConstraints(m3),QDDot);// Forward dynamics
//    int i = 0;
//    std::cout << m3.getConstraints(m3).force(i) << std::endl;
////    for (int i=0; i<100000000; ++i){
////        std::cout << i << std::endl;
////        RigidBodyDynamics::ForwardDynamicsConstraintsDirect(m3, Q, Q, Q, T);// Inverse Dynamics
////        std::cout << T << std::endl;

////    }
    return 0;

//    s2mMusculoSkeletalModel m;
//    m = s2mRead::readModelFile("pyomecaman.s2mMod");

//    s2mMusculoSkeletalModel * m2 = m3;
//    //m2 = new s2mMusculoSkeletalModel(static_cast< const s2mMusculoSkeletalModel& >(m));

//    std::cout << m2->nbQ() << std::endl;
//    delete m2;
//    delete m3;
//    std::cout << m3->nbQ() << std::endl;
//    std::cout << m2->nbQ() << std::endl;


//    std::cout << m.Tags((unsigned int)0) << std::endl;
//    std::cout << m2->Tags((unsigned int)0) << std::endl;
//    std::cout << m3->Tags((unsigned int)0) << std::endl;
//    //for (int i = 0; i<10000; ++i)
//    //    func();
//    delete m2;
//    return 0;
}

#else
int main()
{
    s2mMusculoSkeletalModel m("pyomecaman.s2mMod");
    return 0;
}
#endif
