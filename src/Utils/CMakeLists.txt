set(MASTER_PROJECT_NAME ${PROJECT_NAME})
project(${MASTER_PROJECT_NAME}_utils)
set(UTILS_MODULE_NAME ${MASTER_PROJECT_NAME}_utils PARENT_SCOPE)

# Add the relevant files
set(SRC_LIST_MODULE
    ${CMAKE_CURRENT_SOURCE_DIR}/RotoTrans.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Equation.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Error.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/IfStream.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Path.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Matrix.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Node.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Scalar.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Vector3d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Range.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Rotation.cpp    
    ${CMAKE_CURRENT_SOURCE_DIR}/RotoTransNode.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/RotoTransNodes.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Quaternion.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/String.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Timer.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Vector.cpp
)

# Create the library
if (WIN32)
    add_library(${PROJECT_NAME} STATIC ${SRC_LIST_MODULE})
else()
    if (BUILD_SHARED_LIBS)
        add_library(${PROJECT_NAME} SHARED ${SRC_LIST_MODULE})
    else()
        add_library(${PROJECT_NAME} STATIC ${SRC_LIST_MODULE})
    endif()
endif()
set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "_debug")

# Add the include
target_include_directories(${PROJECT_NAME} PUBLIC
  ${ALL_INCLUDE_DIR}
)

# Installation
install(
    TARGETS ${PROJECT_NAME}
    ARCHIVE DESTINATION ${${MASTER_PROJECT_NAME}_LIB_FOLDER}
    RUNTIME DESTINATION ${${MASTER_PROJECT_NAME}_BIN_FOLDER}
    LIBRARY DESTINATION ${${MASTER_PROJECT_NAME}_LIB_FOLDER}
)
set_target_properties(${PROJECT_NAME} PROPERTIES INSTALL_RPATH ${${MASTER_PROJECT_NAME}_BIN_FOLDER})
set_target_properties(${PROJECT_NAME} PROPERTIES INSTALL_RPATH_USE_LINK_PATH TRUE)
